package handlers

import (
	"context"
	"fmt"
	"football_tgbot/db"
	"football_tgbot/rating"
	"football_tgbot/types"
	"sort"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleTopMatches –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
func HandleTopMatches(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, store db.MatchesStore, ratingService *rating.Service) error {
	ctx := context.Background()
	matches, err := store.GetMatches(ctx, "matches")
	if err != nil {
		return fmt.Errorf("failed to get matches: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—á–µ–π —Å –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
	type MatchWithRating struct {
		Match  types.Match
		Rating float64
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
	var matchesWithRatings []MatchWithRating
	for _, match := range matches {
		rating, err := ratingService.GetMatchRating(ctx, "team_ratings", match)
		if err != nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
		}
		matchesWithRatings = append(matchesWithRatings, MatchWithRating{
			Match:  match,
			Rating: rating,
		})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
	sort.Slice(matchesWithRatings, func(i, j int) bool {
		return matchesWithRatings[i].Rating > matchesWithRatings[j].Rating
	})

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 –º–∞—Ç—á–∞–º–∏
	response := "üèÜ –¢–æ–ø –º–∞—Ç—á–∏:\n\n"
	for i, mwr := range matchesWithRatings {
		if i >= 5 {
			break
		}
		match := mwr.Match
		ratingLevel := getRatingLevel(mwr.Rating)
		response += fmt.Sprintf("%d. %s vs %s\nüìÖ %s\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: %s\n\n",
			i+1,
			match.HomeTeam.Name,
			match.AwayTeam.Name,
			formatDate(match.UTCDate),
			ratingLevel,
		)
	}

	msgConfig := tgbotapi.NewMessage(msg.Chat.ID, response)
	_, err = bot.Send(msgConfig)
	return err
}

// getRatingLevel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
func getRatingLevel(rating float64) string {
	switch {
	case rating >= 0.8:
		return "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
	case rating >= 0.6:
		return "‚≠ê‚≠ê‚≠ê‚≠ê"
	case rating >= 0.4:
		return "‚≠ê‚≠ê‚≠ê"
	case rating >= 0.2:
		return "‚≠ê‚≠ê"
	default:
		return "‚≠ê"
	}
}

// formatDate —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –º–∞—Ç—á–∞
func formatDate(utcDate string) string {
	t, err := time.Parse(time.RFC3339, utcDate)
	if err != nil {
		return utcDate
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
	return t.Format("02.01.2006 15:04")
}
